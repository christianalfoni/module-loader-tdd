0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.2.18
3 info using node@v0.10.5
4 verbose publish [ '.' ]
5 verbose read json /Users/christian/Documents/dev/module-loader-tdd/package.json
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/christian/.npm/3a52ce78-.lock
11 verbose read json package.json
12 verbose tar pack [ '/var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz',
12 verbose tar pack   '.' ]
13 verbose tarball /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz
14 verbose folder .
15 info prepublish module-loader-tdd@0.2.0
16 silly lockFile 3a52ce78- .
17 verbose lock . /Users/christian/.npm/3a52ce78-.lock
18 silly lockFile 27ae82a5-9464-0-30410450347699225-tmp-tgz /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz
19 verbose lock /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz /Users/christian/.npm/27ae82a5-9464-0-30410450347699225-tmp-tgz.lock
20 silly lockFile 3a52ce78- .
21 silly lockFile 3a52ce78- .
22 silly lockFile 27ae82a5-9464-0-30410450347699225-tmp-tgz /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz
23 silly lockFile 27ae82a5-9464-0-30410450347699225-tmp-tgz /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz
24 verbose tar unpack /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz
25 silly lockFile 5495dd6b-9464-0-30410450347699225-package /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package
26 verbose lock /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package /Users/christian/.npm/5495dd6b-9464-0-30410450347699225-package.lock
27 silly lockFile 27ae82a5-9464-0-30410450347699225-tmp-tgz /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz
28 verbose lock /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz /Users/christian/.npm/27ae82a5-9464-0-30410450347699225-tmp-tgz.lock
29 silly gunzTarPerm modes [ '755', '644' ]
30 silly gunzTarPerm extractEntry package.json
31 silly gunzTarPerm extractEntry .npmignore
32 silly gunzTarPerm extractEntry README.md
33 silly gunzTarPerm extractEntry lib/module-loader-tdd.js
34 silly gunzTarPerm extractEntry tests/Buster.js
35 silly gunzTarPerm extractEntry tests/module-loader-tdd-test.js
36 verbose read json /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package/package.json
37 silly lockFile 5495dd6b-9464-0-30410450347699225-package /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package
38 silly lockFile 5495dd6b-9464-0-30410450347699225-package /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package
39 silly lockFile 27ae82a5-9464-0-30410450347699225-tmp-tgz /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz
40 silly lockFile 27ae82a5-9464-0-30410450347699225-tmp-tgz /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/tmp.tgz
41 verbose from cache /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package/package.json
42 verbose tar pack [ '/Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz',
42 verbose tar pack   '/var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package' ]
43 verbose tarball /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz
44 verbose folder /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package
45 silly lockFile 5495dd6b-9464-0-30410450347699225-package /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package
46 verbose lock /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package /Users/christian/.npm/5495dd6b-9464-0-30410450347699225-package.lock
47 silly lockFile 182f5746-ule-loader-tdd-0-2-0-package-tgz /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz
48 verbose lock /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz /Users/christian/.npm/182f5746-ule-loader-tdd-0-2-0-package-tgz.lock
49 silly lockFile 5495dd6b-9464-0-30410450347699225-package /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package
50 silly lockFile 5495dd6b-9464-0-30410450347699225-package /var/folders/zq/l44_dp9n6js2cz4y3sj1s_g40000gn/T/npm-11472/1392380949464-0.30410450347699225/package
51 silly lockFile 182f5746-ule-loader-tdd-0-2-0-package-tgz /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz
52 silly lockFile 182f5746-ule-loader-tdd-0-2-0-package-tgz /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz
53 silly lockFile 0cc31611--module-loader-tdd-0-2-0-package /Users/christian/.npm/module-loader-tdd/0.2.0/package
54 verbose lock /Users/christian/.npm/module-loader-tdd/0.2.0/package /Users/christian/.npm/0cc31611--module-loader-tdd-0-2-0-package.lock
55 silly lockFile 0cc31611--module-loader-tdd-0-2-0-package /Users/christian/.npm/module-loader-tdd/0.2.0/package
56 silly lockFile 0cc31611--module-loader-tdd-0-2-0-package /Users/christian/.npm/module-loader-tdd/0.2.0/package
57 verbose tar unpack /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz
58 silly lockFile 0cc31611--module-loader-tdd-0-2-0-package /Users/christian/.npm/module-loader-tdd/0.2.0/package
59 verbose lock /Users/christian/.npm/module-loader-tdd/0.2.0/package /Users/christian/.npm/0cc31611--module-loader-tdd-0-2-0-package.lock
60 silly lockFile 182f5746-ule-loader-tdd-0-2-0-package-tgz /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz
61 verbose lock /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz /Users/christian/.npm/182f5746-ule-loader-tdd-0-2-0-package-tgz.lock
62 silly gunzTarPerm modes [ '755', '644' ]
63 silly gunzTarPerm extractEntry package.json
64 silly gunzTarPerm extractEntry .npmignore
65 silly gunzTarPerm extractEntry README.md
66 silly gunzTarPerm extractEntry lib/module-loader-tdd.js
67 silly gunzTarPerm extractEntry tests/Buster.js
68 silly gunzTarPerm extractEntry tests/module-loader-tdd-test.js
69 verbose read json /Users/christian/.npm/module-loader-tdd/0.2.0/package/package.json
70 silly lockFile 0cc31611--module-loader-tdd-0-2-0-package /Users/christian/.npm/module-loader-tdd/0.2.0/package
71 silly lockFile 0cc31611--module-loader-tdd-0-2-0-package /Users/christian/.npm/module-loader-tdd/0.2.0/package
72 silly lockFile 182f5746-ule-loader-tdd-0-2-0-package-tgz /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz
73 silly lockFile 182f5746-ule-loader-tdd-0-2-0-package-tgz /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz
74 silly shasum updated bytes 10325
75 info shasum 04cc1235ae2be71a435bb37a2214fb01b4de0313
75 info shasum /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz
76 verbose from cache /Users/christian/.npm/module-loader-tdd/0.2.0/package/package.json
77 verbose chmod /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz 644
78 verbose chown /Users/christian/.npm/module-loader-tdd/0.2.0/package.tgz [ 501, 20 ]
79 silly lockFile 3a52ce78- .
80 silly publish { name: 'module-loader-tdd',
80 silly publish   description: 'Module loader that lets you test each module with private methods and stubbed dependencies',
80 silly publish   version: '0.2.0',
80 silly publish   repository:
80 silly publish    { type: 'git',
80 silly publish      url: 'https://github.com/christianalfoni/module-loader-tdd.git' },
80 silly publish   main: 'lib/module-loader-tdd',
80 silly publish   devDependencies:
80 silly publish    { grunt: '~0.4.2',
80 silly publish      'grunt-contrib-uglify': '~0.2.2',
80 silly publish      hbs: '~2.4.0',
80 silly publish      'recursive-readdir': '0.0.2',
80 silly publish      express: '~3.4.4',
80 silly publish      sinon: '~1.7.3' },
80 silly publish   dependencies: { sinon: '~1.7.3', callsite: '~1.0.0' },
80 silly publish   readme: 'module-loader-tdd\n=================\nAn easy to use and easy to test module loader. **EXPERIMENTAL VERSION**.\n### Table of contents\n- [Install](#install)\n- [The spec](#spec)\n- [Creating a module](#creating)\n- [Adding dependencies](#deps)\n- [Templates](#templates)\n- [Adding private methods](#privates)\n- [Initializing](#init)\n- [Testing a module](#testing)\n- [Node: Creating a module](#creating_node)\n- [Node: Initializing](#init_node)\n- [Node: Testing a module](#testing_node)\n- [Why build it?](#why)\n\n\n**I strongly** urge you to have a look at the following Grunt plugin:\nhttps://github.com/christianalfoni/grunt-tdd\n\nThe module-loader-tdd is built to more easily test code and **grunt-tdd** will help you get going with that.\n\n#### Warning\nLatest version has changed the API. No third argument **requireTemplate**, but extended **require** with **require.template** instead.\n\n<a name="install"></a>\n## Install\n- **Browser**: Download the file from lib folder\n- **Node**: npm install module-loader-tdd\n\n<a name="spec"></a>\n## Spec\n\n### The basics\n- Create closed modules that does not pollute the global scope\n- A module can import other modules\n- Module loading order is irrelevant. A dependency not yet loaded should postpone the initializing of the module\nuntil the dependency has been initialized\n- It supports concatinating all module files, compress and uglify without breaking any code\n- Give good error indications if you are using it wrong\n- Freedom in naming modules (namespaces etc.)\n- Short stack trace\n- Supports Node JS\n- Supports HTML templates\n\n### Test additions\n- Close the module completely, no code execution beyond the tested module\n- A custom module context, giving access to setting private methods and deps that are only exposed during testing\n- A "modules.test()" method which exposes private functions and deps. The deps are stubbed causing the module\nto be completely unaffected by other parts of the project\n\n## How to use it in the browser\nYou are required to load the scripts with script tags. They should be loaded in the body of your HTML so that any CSS\nand/or HTML content can be displayed while loading the scripts.\n\n**module-loader** exposes a global variable called: **modules**. It has three methods, *create*, *initialize* and \n*test*.\n<a name="creating"></a>\n### Creating a module\nPass two arguments to the create method. A name for the module, which can contain any character, and a function. \nThe returned value from the function will be available to other modules.\n\n```javascript\n\t// FILE: logger.js\n\tmodules.create(\'logger\', function () {\n  \t\t\'use strict\';\n  \t\treturn {\n    \t\tlog: function (message) {\n      \t\t\tconsole.log(message);\n    \t\t}\n  \t\t};\n\t});\n```\n\t\n> **TIP:** Use namespace to divide your modules. E.g. **modules.create(\'helper.logger\'...** or \n**modules.create(\'model.Todo\'...**\n\n<a name="deps"></a>\n### Adding dependencies\nThe first argument passed to your module function is *require*. Use it to fetch other modules defined. \n\n```javascript\n\t// FILE: helloWorld.js\n\tmodules.create(\'helloWorld\', function (require) {\n  \t\t\'use strict\';\n  \t\tvar logger = require(\'logger\');\n  \t\treturn {\n    \t\thello: function () {\n      \t\t\tlogger.log(\'Hello world!\');\n    \t\t}\n  \t\t};\n\t});\n```\n\t\n> Even if **helloWorld.js** is loaded after **logger.js** it will still work.\n\n<a name="privates"></a>\n### Creating private methods\nThe second argument passed is an object of private methods. These methods are not exposed, but will be\nduring testing of the module. This gives you a clear definition of which methods are public and which are private\nto the module.\n\n```javascript\n\t// FILE: helloWorld.js\n\tmodules.create(\'helloWorld\', function (require, p) {\n  \t\t\'use strict\';\n  \t\tvar logger = require(\'logger\');\n\n  \t\tp.sayToWorld = function (say) {\n      \t\t\treturn say + \' world!\';\n  \t\t};\n  \n  \t\treturn {\n    \t\t\thello: function () {\n      \t\t\t\tlogger.log(p.sayToWorld(\'Hello\'));\n    \t\t\t}\n  \t\t};\n\t});\n```\n\t\n**Why create these private methods?** When developing test-driven and functional, a core concept is creating small input-output\nfunctions that are easily testable. You normally do not want to expose these methods to the rest of the application.\nBy using a "module-context" these private methods can be exposed only during testing.\n\nThe argument passed to the module function is also available in the execution context itself. An alternative convention on defining privates can be done by replacing the privates object, which has to be done like this:\n\n```javascript\n\tmodules.create(\'helloWorld\', function (require) {\n  \t\t\'use strict\';\n  \t\tvar logger = require(\'logger\');\n\n  \t\t// The p variable lets you point to the privates \n  \t\t// from any public method, or other private method\n  \t\tvar p = this.privates = { \n    \t\t\tsayToWorld: function (say) {\n      \t\t\t\treturn say + \' world!\';\n    \t\t\t}\n \t \t};\n  \n  \t\treturn {\n    \t\t\thello: function () {\n      \t\t\t\tlogger.log(p.sayToWorld(\'Hello\'));\n    \t\t\t}\n  \t\t};\n\t});\n```\n\t\n<a name="templates"></a>\n### Adding templates\nThe second argument passed to the module, *require*, also has its own method **template**. Currently it only supports **Handlebars**. Use it to require a template from a */templates* path or a predefined path.\n\n```javascript\n\t// FILE: helloWorld.js\n\tmodules.create(\'helloWorld\', function (require, p, requireTemplate) {\n  \t\t\'use strict\';\n  \t\tvar logger = require(\'logger\'),\n   \t\ttemplate = require.template(\'message\');\n  \t\treturn {\n   \t\t\thello: function () {\n   \t\t\t\tlogger.log(\'Hello world!\');\n   \t\t\t\tdocument.body.innerHMTL = template({ content: \'Hello world!\' });\n   \t\t\t}\n  \t\t};\n\t});\n```\n\t\n> You can configure the template directory, take a look at "Initializing the project"\n\n<a name="init"></a>\n### Initializing the project\n\n```html\n\t<!-- FILE: index.html -->\n\t<!DOCTYPE html>\n\t<html>\n  \t\t<head>\n  \t\t</head>\n  \t\t<body>\n    \t\t<script src="lib/module-loader-tdd.js"></script>\n    \t\t<script src="src/myModule.js"></script>\n    \t\t<script src="src/myDep.js"></script>\n    \t\t<script>\n      \t\t\tmodules.templatesPath = \'src/templates/\'; // Sets the path to the templates, default is \'templates/\'\n      \t\t\tmodules.initialize(function (require) {\n         \t\t\tvar helloWorld = require(\'helloWorld\');\n         \t\t\thelloWorld.hello(); // -> Hello world!\n      \t\t\t});\n    \t\t</script>\n  \t\t</body>\n\t</html>\n````\n\t\n>**Note** that in production all the modules will be concatinated and optimized into one single javascript file, \navoiding any unneccesary fetching of files.\n\n> **Note** that you could of course load a **main.js** as the last script instead of putting it inside your html\nfile/template\n\n>**TIP:** When using Node JS and the HTML is delivered with a template, you can easily dynamically add the script\ntags based on available .js files in your source folder. Look at the *demo*.\n\n<a name="testing"></a>\n### Testing a module\nNow, this is where the **module-loader-tdd** shines. Running a test on a module requires you to pass the name of \nthe module and a function for testing. The function receives three arguments. The first being the the module, \nthe second being its private methods and the last argument is the required dependencies inside the module being tested.\n\nThe deps object is a map of the dependencies, e.g. *deps.logger*. If the dependency is an object with methods\nthey are all automatically *stubbed*, which basically means that they are verifiable empty functions. We do this\nto isolate the test to only the module and not trigger code that should be tested elsewhere.\n\nAny required templates will not be fetched, it will return an empty string, as you will be testing the code that puts content into your HTML, not the HTML itself.\n\n\n```javascript\n\t// FILE: helloWorld-test.js\n\tmodules.test(\'helloWorld\', function (helloWorld, p, deps) {\n  \t\t\'use strict\';\n  \t\tbuster.testCase(\'helloWorld test\', {\n    \t\t\'hello()\': {\n      \t\t\t\'is a function\': function () {\n        \t\t\tassert.isFunction(helloWorld.hello);\n      \t\t\t},\n      \t\t\t\'calls dependency with message\': function () {\n        \t\t\thelloWorld.hello();\n        \t\t\t// Deps are stubbed methods (Sinon JS), which lets us verify their usage\n        \t\t\t// without actually executing the code\n        \t\t\tassert(deps.logger.log.calledOnce); // Has the log method been called?\n        \t\t\tassert(deps.logger.log.calledWith(\'Hello world!\')); // Was it called with the expected message?\n     \t\t\t }\n    \t\t},\n    \t\t\'p.sayToWorld()\': {\n      \t\t\t\'is a function\': function () {\n        \t\t\tassert.isFunction(p.sayToWorld);\n      \t\t\t},\n      \t\t\t\'returns passed argument with " world!" appended to the string\': function () {\n        \t\t\tassert.equals(p.sayToWorld(\'Hello\'), \'Hello world!\');\n        \t\t\tassert.equals(p.sayToWorld(\'Good evening\'), \'Good evening world!\');\n      \t\t\t}\n    \t\t}\n  \t\t});\n\t});\n```\n\t\n<a name="creating_node"></a>\n### Creating a module with Node js\nNode JS has a module loader, but it does not have the privates and dep stubbing that **module-loader-tdd** offers. If you want that functionality also in Node you wrap each file the same way as in the browser.\n\nSince Node JS already has a *require* function and a convention for loading files, **module-loader-tdd** does not mess with that. It only works as a "middle-man" registering all loaded modules to create a context with privates and stubbed dependencies for testing. Because of this, you do not set a name for the module.\n\nThe *require.template* method is not implemented on Node JS as you normally do not load templates directly and Node JS is not only web related.\n\n```javascript\n\t// FILE: mainModule.js\n\tmodules.create(function (require, p) {\n  \t\t\'use strict\';\n  \t\tvar fs = require(\'fs\'), // Loads the built in fs module in Node JS\n      \tmyModule = require(\'./myModule\'); // Loads one of your own modules, relative to the file you are in\n  \n  \t\tp.log = function () {\n    \t\tconsole.log(\'test\');\n  \t\t};\n      \n  \t\treturn {\n    \t\tlog: function (message) {\n      \t\t\tp.log();\n    \t\t}\n  \t\t};\n\t});\n```\n\t\n> **NOTE** That if a dependency returns an empty object you have probably forgotten to use the passed *require* function. Modules required with Node JS global *require* will not be registered and handled by **module-loader-tdd**\n\n<a name="init_node"></a>\n### Initializing the modules\nIn your main .js file for the Node project, add the following:\n\n```javascript\n\trequire(\'module-loader-tdd\'); // Will add "modules" to the global scope\n\tmodules.initialize(function (require) {\n  \t\tvar module = require(\'./main\');\n  \t\tmodule.log();\n\t});\n\n```\n<a name="testing_node"></a>\n### Testing Node JS modules\nThere is little difference in testing a Node JS module.\n\n```javascript\n\t// FILE: myModule-test.js\n\trequire(\'module-loader-tdd\');\n\n\t// Going to parent folder of tests/ and into the modules folder\n\tmodules.test(\'./../modules/myModule\', function (myModule, p, deps) {\n  \t\t\'use strict\';\n  \t\tbuster.testCase(\'helloWorld test\', {\n    \t\t\'hello()\': {\n      \t\t\t\'is a function\': function () {\n        \t\t\tassert.isFunction(myModule.log);\n      \t\t\t}\n  \t\t\t}\n\t\t});\n```\n<a name="why"></a>\n## Why build it?\n\nI have been working a lot with RequireJS and have a good experience with it. When going\nTDD though, I started having problems with test libraries, test related plugins and testing Node JS. A very typical \nsearch result on Google is: "How to make X work with requirejs". So I went into the specific details about why I \nwas actually using RequireJS and identify through my experience what I really needed and if I could solve it myself.\n\n#### The parts of RequireJS that does not really work for me\n- RequireJS requires a lot of configuration in big projects and the configuration is duplicated when running multiple\napplications against the same modules. The tests also needs a RequireJS configuration\n- "How to make X work with requirejs" gives a feeling of "hacking" together parts of the project\n- A lot of logic is running to load all the modules and "only load needed dependencies" does not really make sense\nto me. When you load the project you normally want to load all the modules\n- It is hard to test the modules. RequireJS modules gives a public interface, but the modules private functions and \ndependencies used makes them difficult to test\n- All libraries are built for normal script loading, not all are built for RequireJS. Shimmed libraries are global, which\nkinda breaks the concept\n- The loading of files is based on directory structuring. You can overwrite with "paths", but that just adds\ncomplexity\n- It is very complex with lots of functionality\n- Have not successfully accomplished code-coverage with it\n- Stack trace is way too long, and does not make much sense\n\nIn RequireJS defense I am not using all the functionality and maybe the projects I work on would benefit more with\na different structure etc, but that also indicates its complexity.\n',
80 silly publish   readmeFilename: 'README.md',
80 silly publish   _id: 'module-loader-tdd@0.2.0',
80 silly publish   dist: { shasum: '04cc1235ae2be71a435bb37a2214fb01b4de0313' },
80 silly publish   _from: '.' }
81 verbose url raw module-loader-tdd
82 verbose url resolving [ 'https://registry.npmjs.org/', './module-loader-tdd' ]
83 verbose url resolved https://registry.npmjs.org/module-loader-tdd
84 info trying registry request attempt 1 at 13:29:20
85 http PUT https://registry.npmjs.org/module-loader-tdd
86 http 409 https://registry.npmjs.org/module-loader-tdd
87 verbose url raw module-loader-tdd
88 verbose url resolving [ 'https://registry.npmjs.org/', './module-loader-tdd' ]
89 verbose url resolved https://registry.npmjs.org/module-loader-tdd
90 info trying registry request attempt 1 at 13:29:21
91 http GET https://registry.npmjs.org/module-loader-tdd
92 http 200 https://registry.npmjs.org/module-loader-tdd
93 error publish fail Cannot publish over existing version.
93 error publish fail Update the 'version' field in package.json and try again.
93 error publish fail
93 error publish fail If the previous version was published in error, see:
93 error publish fail     npm help unpublish
93 error publish fail
93 error publish fail To automatically increment version numbers, see:
93 error publish fail     npm help version
94 error System Darwin 13.0.0
95 error command "node" "/usr/local/bin/npm" "publish"
96 error cwd /Users/christian/Documents/dev/module-loader-tdd
97 error node -v v0.10.5
98 error npm -v 1.2.18
99 error code EPUBLISHCONFLICT
100 verbose exit [ 1, true ]
